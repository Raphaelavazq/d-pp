import React from "react";
import {
  ShoppingCart,
  Users,
  Package,
  DollarSign,
  TrendingUp,
  TrendingDown,
  Activity,
  Eye,
  RefreshCw,
} from "lucide-react";
import { useDashboardAnalytics } from "../../hooks/useDashboardAnalytics";

const DashboardOverview = () => {
  const selectedPeriod = "30d"; // Default period
  const {
    analyticsData,
    recentOrders,
    lowStockProducts,
    loading,
    error,
    refetch,
  } = useDashboardAnalytics(selectedPeriod);

  const StatCard = ({
    title,
    value,
    change,
    icon: IconComponent,
    color = "blue",
  }) => {
    const colorClasses = {
      blue: "bg-blue-50 text-blue-600",
      green: "bg-green-50 text-green-600",
      purple: "bg-purple-50 text-purple-600",
      orange: "bg-orange-50 text-orange-600",
    };

    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900 mt-2">{value}</p>
            {change && (
              <div className="flex items-center mt-2">
                {change > 0 ? (
                  <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                ) : (
                  <TrendingDown className="w-4 h-4 text-red-500 mr-1" />
                )}
                <span
                  className={`text-sm font-medium ${
                    change > 0 ? "text-green-600" : "text-red-600"
                  }`}
                >
                  {Math.abs(change)}%
                </span>
                <span className="text-sm text-gray-500 ml-1">
                  vs last month
                </span>
              </div>
            )}
          </div>
          <div className={`p-3 rounded-lg ${colorClasses[color]}`}>
            {IconComponent && <IconComponent className="w-6 h-6" />}
          </div>
        </div>
      </div>
    );
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(amount || 0);
  };

  const formatDate = (date) => {
    if (!date) return "N/A";
    const dateObj = date instanceof Date ? date : new Date(date);
    return dateObj.toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "delivered":
        return "bg-green-100 text-green-800";
      case "shipped":
        return "bg-blue-100 text-blue-800";
      case "processing":
        return "bg-yellow-100 text-yellow-800";
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  // Calculate percentage changes (mock data for now - would need historical data)
  const getRandomChange = () => (Math.random() * 20 - 10).toFixed(1);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="bg-gray-200 h-32 rounded-xl"></div>
            ))}
          </div>
          <div className="mt-6 grid grid-cols-1 gap-6 lg:grid-cols-2">
            <div className="bg-gray-200 h-64 rounded-xl"></div>
            <div className="bg-gray-200 h-64 rounded-xl"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <div className="flex items-center">
            <div className="flex-shrink-0">
              <Activity className="h-5 w-5 text-yellow-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-yellow-800">
                Dashboard Data Loading Issue
              </h3>
              <div className="mt-2 text-sm text-yellow-700">
                <p>
                  Some analytics features may be limited. The dashboard is using
                  fallback data.
                </p>
                <p className="mt-1 text-xs text-yellow-600">
                  This may happen if Firebase Functions are not deployed or if
                  there are authentication issues.
                </p>
              </div>
              <div className="mt-4 flex space-x-3">
                <button
                  onClick={refetch}
                  className="bg-yellow-100 px-3 py-2 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-200 transition-colors flex items-center"
                  disabled={loading}
                >
                  <RefreshCw
                    className={`w-4 h-4 mr-2 ${loading ? "animate-spin" : ""}`}
                  />
                  Retry
                </button>
                <button
                  onClick={() => window.location.reload()}
                  className="bg-yellow-100 px-3 py-2 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-200 transition-colors"
                >
                  Refresh Page
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Show fallback dashboard with limited data */}
        {analyticsData && (
          <div className="space-y-6 opacity-75">
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-sm text-blue-700 font-medium">
                ðŸ“Š Showing basic dashboard data (limited functionality)
              </p>
            </div>

            {/* Continue with the rest of the dashboard rendering */}
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
              <StatCard
                title="Total Orders"
                value={
                  analyticsData?.summary?.totalOrders?.toLocaleString() || "0"
                }
                change={parseFloat(getRandomChange())}
                icon={ShoppingCart}
                color="blue"
              />
              <StatCard
                title="Total Users"
                value={
                  analyticsData?.summary?.totalCustomers?.toLocaleString() ||
                  "0"
                }
                change={parseFloat(getRandomChange())}
                icon={Users}
                color="green"
              />
              <StatCard
                title="Products"
                value={
                  analyticsData?.summary?.totalProducts?.toLocaleString() || "0"
                }
                change={parseFloat(getRandomChange())}
                icon={Package}
                color="purple"
              />
              <StatCard
                title="Revenue"
                value={formatCurrency(analyticsData?.summary?.totalRevenue)}
                change={parseFloat(getRandomChange())}
                icon={DollarSign}
                color="orange"
              />
            </div>
          </div>
        )}
      </div>
    );
  }

  const summary = analyticsData?.summary || {};

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">
            Dashboard Overview
          </h1>
          <p className="text-gray-600 mt-1">
            Welcome back! Here's what's happening with your store.
          </p>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={refetch}
            className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors flex items-center"
            disabled={loading}
          >
            <RefreshCw
              className={`w-4 h-4 mr-2 ${loading ? "animate-spin" : ""}`}
            />
            Refresh
          </button>
          <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors">
            <Activity className="w-4 h-4 mr-2 inline" />
            View Analytics
          </button>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Total Orders"
          value={summary.totalOrders?.toLocaleString() || "0"}
          change={parseFloat(getRandomChange())}
          icon={ShoppingCart}
          color="blue"
        />
        <StatCard
          title="Total Users"
          value={summary.totalCustomers?.toLocaleString() || "0"}
          change={parseFloat(getRandomChange())}
          icon={Users}
          color="green"
        />
        <StatCard
          title="Products"
          value={summary.totalProducts?.toLocaleString() || "0"}
          change={parseFloat(getRandomChange())}
          icon={Package}
          color="purple"
        />
        <StatCard
          title="Revenue"
          value={formatCurrency(summary.totalRevenue)}
          change={parseFloat(getRandomChange())}
          icon={DollarSign}
          color="orange"
        />
      </div>

      {/* Content Grid */}
      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
        {/* Recent Orders */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100">
          <div className="p-6 border-b border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900">
              Recent Orders
            </h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {recentOrders.length > 0 ? (
                recentOrders.map((order) => (
                  <div
                    key={order.id}
                    className="flex items-center justify-between"
                  >
                    <div>
                      <p className="font-medium text-gray-900">{order.id}</p>
                      <p className="text-sm text-gray-600">
                        {order.customerName ||
                          order.email ||
                          "Unknown Customer"}
                      </p>
                      <p className="text-xs text-gray-500">
                        {formatDate(order.createdAt)}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-gray-900">
                        {formatCurrency(order.total)}
                      </p>
                      <span
                        className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(order.status)}`}
                      >
                        {order.status}
                      </span>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8">
                  <ShoppingCart className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-500">No recent orders found</p>
                </div>
              )}
            </div>
            <div className="mt-6">
              <button className="w-full px-4 py-2 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 transition-colors">
                <Eye className="w-4 h-4 mr-2 inline" />
                View All Orders
              </button>
            </div>
          </div>
        </div>

        {/* Low Stock Alert */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100">
          <div className="p-6 border-b border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900">
              Low Stock Alert
            </h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {lowStockProducts.length > 0 ? (
                lowStockProducts.map((product) => (
                  <div
                    key={product.id}
                    className="flex items-center justify-between"
                  >
                    <div>
                      <p className="font-medium text-gray-900">
                        {product.name}
                      </p>
                      <p className="text-sm text-gray-600">
                        {product.category}
                      </p>
                    </div>
                    <div className="text-right">
                      <span
                        className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                          product.stock === 0
                            ? "bg-red-100 text-red-800"
                            : "bg-orange-100 text-orange-800"
                        }`}
                      >
                        {product.stock === 0
                          ? "Out of Stock"
                          : `${product.stock} left`}
                      </span>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8">
                  <Package className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-500">All products are well stocked</p>
                </div>
              )}
            </div>
            <div className="mt-6">
              <button className="w-full px-4 py-2 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 transition-colors">
                <Package className="w-4 h-4 mr-2 inline" />
                Manage Inventory
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          Quick Actions
        </h3>
        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-left">
            <Package className="w-8 h-8 text-purple-600 mb-2" />
            <p className="font-medium text-gray-900">Add Product</p>
            <p className="text-sm text-gray-600">Create new product listing</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-left">
            <Users className="w-8 h-8 text-blue-600 mb-2" />
            <p className="font-medium text-gray-900">Manage Users</p>
            <p className="text-sm text-gray-600">View and edit user accounts</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-left">
            <ShoppingCart className="w-8 h-8 text-green-600 mb-2" />
            <p className="font-medium text-gray-900">Process Orders</p>
            <p className="text-sm text-gray-600">Review pending orders</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors text-left">
            <Activity className="w-8 h-8 text-orange-600 mb-2" />
            <p className="font-medium text-gray-900">View Analytics</p>
            <p className="text-sm text-gray-600">Check performance metrics</p>
          </button>
        </div>
      </div>
    </div>
  );
};

export default DashboardOverview;
